{"version":3,"file":"static/js/578.2c3c514a.chunk.js","mappings":"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","sources":["Components/Chat/OthersMessage.jsx","Components/Chat/UserMessage.jsx","Components/Chat/ChatPortal.jsx","Components/Chat/Chat.jsx"],"sourcesContent":["import React from \"react\";\r\nimport \"./chatPortal.css\";\r\n\r\nfunction OthersMessage({ message }) {\r\n  return (\r\n    <div className=\"cp-mid-others\">\r\n      <div className=\"cp-mid-left\">\r\n        <div className=\"cp-mid-img\"></div>\r\n      </div>\r\n      <div className=\"cp-mid-right\">\r\n        <div className=\"cp-mid-info\">\r\n          <span className=\"cp-mid-info-name\">{message?.sender_name}</span>\r\n          <span className=\"cp-mid-info-date\">\r\n            {message?.date} - {message?.time}\r\n          </span>\r\n        </div>\r\n        <div className=\"cp-mid-message cp-mid-message-other\">\r\n          {message?.message}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OthersMessage;\r\n","import React from \"react\";\r\nimport \"./chatPortal.css\";\r\n\r\nfunction UserMessage({ message }) {\r\n  return (\r\n    <div className=\"cp-mid-you\">\r\n      <div className=\"cp-mid-left\">\r\n        <div className=\"cp-mid-info\">\r\n          <span className=\"cp-mid-info-date\">\r\n            {message?.date} - {message?.time}\r\n          </span>\r\n          <span className=\"cp-mid-info-name\">You</span>\r\n        </div>\r\n        <div className=\"cp-mid-message cp-mid-message-you\">\r\n          {message?.message}\r\n        </div>\r\n      </div>\r\n      <div className=\"cp-mid-right\">\r\n        <div className=\"cp-mid-img\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserMessage;\r\n","import { Send, SendRounded } from \"@mui/icons-material\";\r\nimport { Button } from \"@mui/material\";\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport \"./chatPortal.css\";\r\nimport OthersMessage from \"./OthersMessage\";\r\nimport UserMessage from \"./UserMessage\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport { useState } from \"react\";\r\nimport { useDataLayerValue } from \"../../Datalayer/DataLayer\";\r\n\r\nfunction ChatPortal({ room }) {\r\n  const socketRef = useRef();\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [{ userData }] = useDataLayerValue();\r\n  const changeMessage = (e) => {\r\n    setMessage(e.target.value);\r\n  };\r\n  const [{ loading }, dispatch] = useDataLayerValue();\r\n  const baseURL = process.env.REACT_APP_SOCKET_BASEURL;\r\n\r\n  const changeDateFormat = () => {\r\n    const d = new Date();\r\n    const months = [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sept\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n    ];\r\n    const month = months[d.getMonth()];\r\n    const date = d.getDate();\r\n    return `${month} ${date}`;\r\n  };\r\n\r\n  const getTime = () => {\r\n    const date = new Date();\r\n    let hours = date.getHours();\r\n    let minutes = date.getMinutes();\r\n    let ampm = hours >= 12 ? \"pm\" : \"am\";\r\n    hours = hours % 12;\r\n    hours = hours ? hours : 12; // the hour '0' should be '12'\r\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n    let strTime = hours + \":\" + minutes + \" \" + ampm;\r\n    return strTime;\r\n  };\r\n\r\n  const joinRoom = () => {\r\n    dispatch({\r\n      type: \"SET_LOADING\",\r\n      loading: true,\r\n    });\r\n    socketRef.current.emit(\"join-room\", room?.room_id, (res) => {\r\n      setMessages(res.roomInfo.messages);\r\n    });\r\n    socketRef.current.on(\"receive-message\", (data) =>\r\n      setMessages((prevState) => [...prevState, data])\r\n    );\r\n    dispatch({\r\n      type: \"SET_LOADING\",\r\n      loading: false,\r\n    });\r\n  };\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    let trimmedMessage = message.replace(/\\s+/g, \" \").trim();\r\n    setMessage(\"\");\r\n    const messageData = {\r\n      sender: {\r\n        name: userData?.name,\r\n        userId: userData?._id,\r\n      },\r\n      date: changeDateFormat(),\r\n      time: getTime(),\r\n      message: trimmedMessage,\r\n      room: room?.room_id,\r\n    };\r\n    socketRef.current?.emit(\"send-message\", messageData);\r\n    setMessages((prevState) => [\r\n      ...prevState,\r\n      {\r\n        sender_name: userData?.name,\r\n        sender_id: userData?._id,\r\n        date: changeDateFormat(),\r\n        time: getTime(),\r\n        message: trimmedMessage,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  // setup socket\r\n  useEffect(() => {\r\n    const ENDPOINT = baseURL;\r\n    socketRef.current = socketIOClient(ENDPOINT);\r\n    joinRoom();\r\n    setMessages([]);\r\n    setMessage(\"\");\r\n  }, [room]);\r\n\r\n  return (\r\n    <div className=\"chatPortal\">\r\n      <div className=\"cp-top\">\r\n        <div className=\"cp-top-logo\"></div>\r\n        <div className=\"cp-top-info\">\r\n          <span className=\"cp-top-name\">{room?.name}</span>\r\n        </div>\r\n      </div>\r\n      <div className=\"cp-mid\">\r\n        {messages?.map((message) =>\r\n          message.sender_id === userData?._id ? (\r\n            <UserMessage message={message} />\r\n          ) : (\r\n            <OthersMessage message={message} />\r\n          )\r\n        )}\r\n      </div>\r\n      <div className=\"cp-btm\">\r\n        <form className=\"cp-btm-inp-container\" onSubmit={(e) => sendMessage(e)}>\r\n          <input\r\n            type=\"text\"\r\n            className=\"cp-btm-inp\"\r\n            placeholder=\"Type a message\"\r\n            value={message}\r\n            onChange={(e) => changeMessage(e)}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            className=\"cp-btm-inp-btn\"\r\n            sx={{\r\n              background: \"rgb(69, 106, 242)\",\r\n              borderRadius: \"0px\",\r\n              borderTopRightRadius: \"8px !important\",\r\n              borderBottomRightRadius: \"8px !important\",\r\n              padding: \"3.5px 10px\",\r\n              boxShadow: \"unset\",\r\n            }}\r\n            type=\"submit\"\r\n            endIcon={<SendRounded />}\r\n          >\r\n            Send\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatPortal;\r\n","import { KeyboardArrowLeftOutlined } from \"@mui/icons-material\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./chat.css\";\r\nimport ChatPortal from \"./ChatPortal\";\r\nimport { useDataLayerValue } from \"../../Datalayer/DataLayer\";\r\nimport { Api } from \"../../Api/Axios\";\r\n\r\nfunction Chat() {\r\n  const history = useNavigate();\r\n  // initialising socket\r\n  const [selectedRoom, setSelectedRoom] = useState();\r\n  const [{ userData, loading }, dispatch] = useDataLayerValue();\r\n  const [chatRooms, setChatRooms] = useState([]);\r\n\r\n  const changeDateFormat = (rawDate) => {\r\n    const d = new Date(rawDate);\r\n    const months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    const month = months[d.getMonth()];\r\n    const date = d.getDate();\r\n    const year = d.getFullYear();\r\n    return `${month} ${date} , ${year}`;\r\n  };\r\n\r\n  const getChatRooms = async () => {\r\n    dispatch({\r\n      type: \"SET_LOADING\",\r\n      loading: true,\r\n    });\r\n\r\n    let upcoming, past, hosted;\r\n    const today = new Date();\r\n\r\n    await Api.get(\"/events/get-user-rooms\")\r\n      .then((res) => {\r\n        upcoming = res.data.rooms?.filter(\r\n          (room) => new Date(room.date) >= today\r\n        );\r\n        past = res.data.rooms?.filter((room) => new Date(room.date) < today);\r\n        hosted = res.data.rooms?.filter(\r\n          (room) => room?.host_id === userData?._id\r\n        );\r\n        setChatRooms({ upcoming: upcoming, past: past, hosted: hosted });\r\n      })\r\n      .catch((err) => {\r\n        dispatch({\r\n          type: \"SET_RESPONSE_DATA\",\r\n          responseData: {\r\n            message:\r\n              err?.response?.data?.message ||\r\n              \"Something went wrong ... please try again\",\r\n            type: \"error\",\r\n          },\r\n        });\r\n      });\r\n    dispatch({\r\n      type: \"SET_LOADING\",\r\n      loading: false,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getChatRooms();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chat-container\">\r\n        <div className=\"chat-left\">\r\n          <div className=\"chat-header-container\">\r\n            <div className=\"chat-back-container\" onClick={() => history(-1)}>\r\n              <KeyboardArrowLeftOutlined />\r\n            </div>\r\n            <span>Messages</span>\r\n          </div>\r\n          {chatRooms?.hosted?.length !== 0 && (\r\n            <span className=\"chat-event-timeline\">Hosted events</span>\r\n          )}\r\n          {chatRooms?.hosted?.map((room) => (\r\n            <div\r\n              className=\"chat-selector\"\r\n              key={room?._id}\r\n              onClick={() => setSelectedRoom(room)}\r\n            >\r\n              <div className=\"chat-op-img\"></div>\r\n              <div className=\"chat-op-info\">\r\n                <span className=\"chat-op-name\">{room?.name}</span>\r\n                <div className=\"chat-op-info-btm\">\r\n                  <span>{changeDateFormat(room?.date)}</span>\r\n                  <span>{room?.type}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n          {chatRooms?.upcoming?.length !== 0 && (\r\n            <span className=\"chat-event-timeline\">Upcoming events</span>\r\n          )}\r\n          {chatRooms?.upcoming?.map((room) => (\r\n            <div\r\n              className=\"chat-selector\"\r\n              key={room?._id}\r\n              onClick={() => setSelectedRoom(room)}\r\n            >\r\n              <div className=\"chat-op-img\"></div>\r\n              <div className=\"chat-op-info\">\r\n                <span className=\"chat-op-name\">{room?.name}</span>\r\n                <div className=\"chat-op-info-btm\">\r\n                  <span>{changeDateFormat(room?.date)}</span>\r\n                  <span>{room?.type}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n          {chatRooms?.past?.length !== 0 && (\r\n            <span className=\"chat-event-timeline\">Past events</span>\r\n          )}\r\n          {chatRooms?.past?.map((room) => (\r\n            <div\r\n              className=\"chat-selector\"\r\n              key={room?._id}\r\n              onClick={() => setSelectedRoom(room)}\r\n            >\r\n              <div className=\"chat-op-img\"></div>\r\n              <div className=\"chat-op-info\">\r\n                <span className=\"chat-op-name\">{room?.name}</span>\r\n                <div className=\"chat-op-info-btm\">\r\n                  <span>{changeDateFormat(room?.date)}</span>\r\n                  <span>{room?.type}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"chat-right\">\r\n          {selectedRoom && <ChatPortal room={selectedRoom} />}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n"],"names":["message","className","sender_name","date","time","room","socketRef","useRef","useState","setMessage","messages","setMessages","useDataLayerValue","userData","dispatch","loading","changeDateFormat","d","Date","month","getMonth","getDate","getTime","hours","getHours","minutes","getMinutes","ampm","useEffect","current","socketIOClient","process","type","emit","room_id","res","roomInfo","on","data","prevState","name","map","sender_id","_id","onSubmit","e","preventDefault","trimmedMessage","replace","trim","messageData","sender","userId","sendMessage","placeholder","value","onChange","target","changeMessage","Button","variant","sx","background","borderRadius","borderTopRightRadius","borderBottomRightRadius","padding","boxShadow","endIcon","SendRounded","history","useNavigate","selectedRoom","setSelectedRoom","chatRooms","setChatRooms","rawDate","year","getFullYear","getChatRooms","today","Api","then","upcoming","rooms","filter","past","hosted","host_id","catch","err","responseData","response","onClick","KeyboardArrowLeftOutlined","length"],"sourceRoot":""}