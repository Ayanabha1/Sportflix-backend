{"version":3,"file":"static/js/578.a056d3fe.chunk.js","mappings":"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","sources":["Components/Chat/OthersMessage.jsx","Components/Chat/UserMessage.jsx","Components/Chat/ChatPortal.jsx","Components/Chat/Chat.jsx"],"sourcesContent":["import React from \"react\";\r\nimport \"./chatPortal.css\";\r\n\r\nfunction OthersMessage({ message }) {\r\n  return (\r\n    <div className=\"cp-mid-others\">\r\n      <div className=\"cp-mid-left\">\r\n        <div className=\"cp-mid-img\"></div>\r\n      </div>\r\n      <div className=\"cp-mid-right\">\r\n        <div className=\"cp-mid-info\">\r\n          <span className=\"cp-mid-info-name\">{message?.sender_name}</span>\r\n          <span className=\"cp-mid-info-date\">\r\n            {message?.date} - {message?.time}\r\n          </span>\r\n        </div>\r\n        <div className=\"cp-mid-message cp-mid-message-other\">\r\n          {message?.message}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OthersMessage;\r\n","import React from \"react\";\r\nimport \"./chatPortal.css\";\r\n\r\nfunction UserMessage({ message }) {\r\n  return (\r\n    <div className=\"cp-mid-you\">\r\n      <div className=\"cp-mid-left\">\r\n        <div className=\"cp-mid-info\">\r\n          <span className=\"cp-mid-info-date\">\r\n            {message?.date} - {message?.time}\r\n          </span>\r\n          <span className=\"cp-mid-info-name\">You</span>\r\n        </div>\r\n        <div className=\"cp-mid-message cp-mid-message-you\">\r\n          {message?.message}\r\n        </div>\r\n      </div>\r\n      <div className=\"cp-mid-right\">\r\n        <div className=\"cp-mid-img\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserMessage;\r\n","import {\r\n  KeyboardArrowLeftOutlined,\r\n  Send,\r\n  SendRounded,\r\n} from \"@mui/icons-material\";\r\nimport { Button } from \"@mui/material\";\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport \"./chatPortal.css\";\r\nimport OthersMessage from \"./OthersMessage\";\r\nimport UserMessage from \"./UserMessage\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport { useState } from \"react\";\r\nimport { useDataLayerValue } from \"../../Datalayer/DataLayer\";\r\n\r\nfunction ChatPortal({ room, showMobileChat, removeChatRoom }) {\r\n  const socketRef = useRef();\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [{ userData }] = useDataLayerValue();\r\n  const changeMessage = (e) => {\r\n    setMessage(e.target.value);\r\n  };\r\n  const [{ loading }, dispatch] = useDataLayerValue();\r\n  const baseURL = process.env.REACT_APP_SOCKET_BASEURL;\r\n\r\n  const changeDateFormat = () => {\r\n    const d = new Date();\r\n    const months = [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sept\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n    ];\r\n    const month = months[d.getMonth()];\r\n    const date = d.getDate();\r\n    return `${month} ${date}`;\r\n  };\r\n\r\n  const getTime = () => {\r\n    const date = new Date();\r\n    let hours = date.getHours();\r\n    let minutes = date.getMinutes();\r\n    let ampm = hours >= 12 ? \"pm\" : \"am\";\r\n    hours = hours % 12;\r\n    hours = hours ? hours : 12; // the hour '0' should be '12'\r\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n    let strTime = hours + \":\" + minutes + \" \" + ampm;\r\n    return strTime;\r\n  };\r\n\r\n  const joinRoom = () => {\r\n    dispatch({\r\n      type: \"SET_LOADING\",\r\n      loading: true,\r\n    });\r\n    socketRef.current.emit(\"join-room\", room?.room_id, (res) => {\r\n      setMessages(res.roomInfo.messages);\r\n    });\r\n    socketRef.current.on(\"receive-message\", (data) =>\r\n      setMessages((prevState) => [...prevState, data])\r\n    );\r\n    dispatch({\r\n      type: \"SET_LOADING\",\r\n      loading: false,\r\n    });\r\n  };\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    let trimmedMessage = message.replace(/\\s+/g, \" \").trim();\r\n    setMessage(\"\");\r\n    const messageData = {\r\n      sender: {\r\n        name: userData?.name,\r\n        userId: userData?._id,\r\n      },\r\n      date: changeDateFormat(),\r\n      time: getTime(),\r\n      message: trimmedMessage,\r\n      room: room?.room_id,\r\n    };\r\n    socketRef.current?.emit(\"send-message\", messageData);\r\n    setMessages((prevState) => [\r\n      ...prevState,\r\n      {\r\n        sender_name: userData?.name,\r\n        sender_id: userData?._id,\r\n        date: changeDateFormat(),\r\n        time: getTime(),\r\n        message: trimmedMessage,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  // setup socket\r\n  useEffect(() => {\r\n    const ENDPOINT = baseURL;\r\n    socketRef.current = socketIOClient(ENDPOINT);\r\n    joinRoom();\r\n    setMessages([]);\r\n    setMessage(\"\");\r\n  }, [room]);\r\n\r\n  return (\r\n    <div className=\"chatPortal\">\r\n      <div className=\"cp-top\">\r\n        {showMobileChat && <span onClick={() => removeChatRoom()}>Back</span>}\r\n        <div className=\"cp-top-info\">\r\n          <span className=\"cp-top-name\">{room?.name} Chatroom</span>\r\n        </div>\r\n      </div>\r\n      <div className=\"cp-mid\">\r\n        {messages?.map((message) =>\r\n          message.sender_id === userData?._id ? (\r\n            <UserMessage message={message} />\r\n          ) : (\r\n            <OthersMessage message={message} />\r\n          )\r\n        )}\r\n      </div>\r\n      <div className=\"cp-btm\">\r\n        <form className=\"cp-btm-inp-container\" onSubmit={(e) => sendMessage(e)}>\r\n          <input\r\n            type=\"text\"\r\n            className=\"cp-btm-inp\"\r\n            placeholder=\"Type a message\"\r\n            value={message}\r\n            onChange={(e) => changeMessage(e)}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            className=\"cp-btm-inp-btn\"\r\n            sx={{\r\n              background: \"rgb(69, 106, 242)\",\r\n              borderRadius: \"0px\",\r\n              borderTopRightRadius: \"8px !important\",\r\n              borderBottomRightRadius: \"8px !important\",\r\n              padding: \"3.5px 10px\",\r\n              boxShadow: \"unset\",\r\n            }}\r\n            type=\"submit\"\r\n            endIcon={<SendRounded />}\r\n          >\r\n            Send\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatPortal;\r\n","import { KeyboardArrowLeftOutlined } from \"@mui/icons-material\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./chat.css\";\r\nimport ChatPortal from \"./ChatPortal\";\r\nimport { useDataLayerValue } from \"../../Datalayer/DataLayer\";\r\nimport { Api } from \"../../Api/Axios\";\r\n\r\nfunction Chat() {\r\n  const history = useNavigate();\r\n  // initialising socket\r\n  const [selectedRoom, setSelectedRoom] = useState();\r\n  const [{ userData, loading }, dispatch] = useDataLayerValue();\r\n  const [chatRooms, setChatRooms] = useState([]);\r\n  const [screenWidth, setScreenWidth] = useState(null);\r\n  const [showMobileChat, setShowMobileChat] = useState(false);\r\n\r\n  const changeDateFormat = (rawDate) => {\r\n    const d = new Date(rawDate);\r\n    const months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    const month = months[d.getMonth()];\r\n    const date = d.getDate();\r\n    const year = d.getFullYear();\r\n    return `${month} ${date} , ${year}`;\r\n  };\r\n\r\n  const getChatRooms = async () => {\r\n    dispatch({\r\n      type: \"SET_LOADING\",\r\n      loading: true,\r\n    });\r\n\r\n    let upcoming, past, hosted;\r\n    const today = new Date();\r\n\r\n    await Api.get(\"/events/get-user-rooms\")\r\n      .then((res) => {\r\n        upcoming = res.data.rooms?.filter(\r\n          (room) => new Date(room.date) >= today\r\n        );\r\n        past = res.data.rooms?.filter((room) => new Date(room.date) < today);\r\n        hosted = res.data.rooms?.filter(\r\n          (room) => room?.host_id === userData?._id\r\n        );\r\n        setChatRooms({ upcoming: upcoming, past: past, hosted: hosted });\r\n      })\r\n      .catch((err) => {\r\n        dispatch({\r\n          type: \"SET_RESPONSE_DATA\",\r\n          responseData: {\r\n            message:\r\n              err?.response?.data?.message ||\r\n              \"Something went wrong ... please try again\",\r\n            type: \"error\",\r\n          },\r\n        });\r\n      });\r\n    dispatch({\r\n      type: \"SET_LOADING\",\r\n      loading: false,\r\n    });\r\n  };\r\n\r\n  const removeChatRoom = () => {\r\n    setSelectedRoom(null);\r\n  };\r\n\r\n  const handleWindowResize = () => {\r\n    if (window.innerWidth <= 1000) {\r\n      setShowMobileChat(true);\r\n    } else {\r\n      setShowMobileChat(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getChatRooms();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (window.innerWidth <= 1000) {\r\n      setShowMobileChat(true);\r\n    } else {\r\n      setShowMobileChat(false);\r\n    }\r\n    window.addEventListener(\"resize\", handleWindowResize);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chat-container\">\r\n        <div className=\"chat-left\">\r\n          {showMobileChat && selectedRoom ? (\r\n            <ChatPortal\r\n              room={selectedRoom}\r\n              showMobileChat={showMobileChat}\r\n              removeChatRoom={removeChatRoom}\r\n            />\r\n          ) : (\r\n            <>\r\n              <div className=\"chat-header-container\">\r\n                <div\r\n                  className=\"chat-back-container\"\r\n                  onClick={() => history(-1)}\r\n                >\r\n                  <KeyboardArrowLeftOutlined />\r\n                </div>\r\n                <span>Messages</span>\r\n              </div>\r\n              <div className=\"chat-left-container\">\r\n                <div className=\"chat-left-main-container\">\r\n                  {\" \"}\r\n                  {chatRooms?.hosted?.length !== 0 && (\r\n                    <span className=\"chat-event-timeline\">Hosted events</span>\r\n                  )}\r\n                  {chatRooms?.hosted?.map((room) => (\r\n                    <div\r\n                      className=\"chat-selector\"\r\n                      key={room?._id}\r\n                      onClick={() => setSelectedRoom(room)}\r\n                    >\r\n                      <div className=\"chat-op-info\">\r\n                        <span className=\"chat-op-name\">{room?.name}</span>\r\n                        <div className=\"chat-op-info-btm\">\r\n                          <span>{changeDateFormat(room?.date)}</span>\r\n                          <span>{room?.type}</span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                  {chatRooms?.upcoming?.length !== 0 && (\r\n                    <span className=\"chat-event-timeline\">Upcoming events</span>\r\n                  )}\r\n                  {chatRooms?.upcoming?.map((room) => (\r\n                    <div\r\n                      className=\"chat-selector\"\r\n                      key={room?._id}\r\n                      onClick={() => setSelectedRoom(room)}\r\n                    >\r\n                      <div className=\"chat-op-info\">\r\n                        <span className=\"chat-op-name\">{room?.name}</span>\r\n                        <div className=\"chat-op-info-btm\">\r\n                          <span>{changeDateFormat(room?.date)}</span>\r\n                          <span>{room?.type}</span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                  {chatRooms?.past?.length !== 0 && (\r\n                    <span className=\"chat-event-timeline\">Past events</span>\r\n                  )}\r\n                  {chatRooms?.past?.map((room) => (\r\n                    <div\r\n                      className=\"chat-selector\"\r\n                      key={room?._id}\r\n                      onClick={() => setSelectedRoom(room)}\r\n                    >\r\n                      <div className=\"chat-op-info\">\r\n                        <span className=\"chat-op-name\">{room?.name}</span>\r\n                        <div className=\"chat-op-info-btm\">\r\n                          <span>{changeDateFormat(room?.date)}</span>\r\n                          <span>{room?.type}</span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n        {!showMobileChat && (\r\n          <div className=\"chat-right\">\r\n            {selectedRoom && <ChatPortal room={selectedRoom} />}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n"],"names":["message","className","sender_name","date","time","room","showMobileChat","removeChatRoom","socketRef","useRef","useState","setMessage","messages","setMessages","useDataLayerValue","userData","dispatch","loading","changeDateFormat","d","Date","month","getMonth","getDate","getTime","hours","getHours","minutes","getMinutes","ampm","useEffect","current","socketIOClient","process","type","emit","room_id","res","roomInfo","on","data","prevState","onClick","name","map","sender_id","_id","onSubmit","e","preventDefault","trimmedMessage","replace","trim","messageData","sender","userId","sendMessage","placeholder","value","onChange","target","changeMessage","Button","variant","sx","background","borderRadius","borderTopRightRadius","borderBottomRightRadius","padding","boxShadow","endIcon","SendRounded","history","useNavigate","selectedRoom","setSelectedRoom","chatRooms","setChatRooms","setShowMobileChat","rawDate","year","getFullYear","getChatRooms","today","Api","then","upcoming","rooms","filter","past","hosted","host_id","catch","err","responseData","response","handleWindowResize","window","innerWidth","addEventListener","KeyboardArrowLeftOutlined","length"],"sourceRoot":""}