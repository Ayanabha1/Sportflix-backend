{"version":3,"file":"static/js/97.bcbbd0d6.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/ArrowBack.js","Components/Event/Event.jsx"],"sourcesContent":["import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"\n}), 'ArrowBack');","import { ArrowBack, PeopleAltRounded } from \"@mui/icons-material\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { useDataLayerValue } from \"../../Datalayer/DataLayer\";\r\nimport \"./Event.css\";\r\nimport img1 from \"../../Common resources/img1.jpeg\";\r\nimport img2 from \"../../Common resources/img2.png\";\r\nimport { Button } from \"@mui/material\";\r\nimport { Api } from \"../../Api/Axios\";\r\n\r\nfunction Event() {\r\n  const urlParams = useParams();\r\n  const navigate = useNavigate();\r\n  const history = useNavigate();\r\n  const [imageSelected, setImageSelected] = useState(0);\r\n  const [{ loggedIn, userData, focusMapToCenter }, dispatch] =\r\n    useDataLayerValue();\r\n  const [eventInfo, setEventInfo] = useState({});\r\n\r\n  // Location event on map\r\n  const locateEvent = () => {\r\n    dispatch({ type: \"FLY_TO_LOCATION\", id: eventInfo._id });\r\n  };\r\n\r\n  // Function to change date format\r\n  const changeDateFormat = (rawDate) => {\r\n    const d = new Date(rawDate);\r\n    const months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    const month = months[d.getMonth()];\r\n    const date = d.getDate();\r\n    const year = d.getFullYear();\r\n    return `${month} ${date} , ${year}`;\r\n  };\r\n\r\n  // Function to get target event details\r\n  const getEventDetails = async (eventId) => {\r\n    dispatch({ type: \"SET_LOADING\", loading: true });\r\n\r\n    await Api.get(\"/events/get-event-by-id\", { params: { eventId: eventId } })\r\n      .then((res) => {\r\n        setEventInfo(res.data?.event);\r\n      })\r\n      .catch((err) => {\r\n        dispatch({\r\n          type: \"SET_RESPONSE_DATA\",\r\n          responseData: {\r\n            message: err?.response?.data?.message,\r\n            type: \"error\",\r\n          },\r\n        });\r\n      });\r\n    dispatch({ type: \"SET_LOADING\", loading: false });\r\n  };\r\n\r\n  // Function to join event\r\n  const joinEvent = async () => {\r\n    dispatch({ type: \"SET_LOADING\", loading: true });\r\n    const eventId = eventInfo?._id;\r\n    await Api.post(\"/events/join-event\", { eventId: eventId })\r\n      .then((res) => {\r\n        dispatch({\r\n          type: \"SET_RESPONSE_DATA\",\r\n          responseData: { message: res.data?.message, type: \"success\" },\r\n        });\r\n        navigate(\"/\");\r\n      })\r\n      .catch((err) => {\r\n        //console.log(err);\r\n        dispatch({\r\n          type: \"SET_RESPONSE_DATA\",\r\n          responseData: {\r\n            message: err?.response?.data?.message,\r\n            type: \"error\",\r\n          },\r\n        });\r\n      });\r\n    dispatch({ type: \"SET_LOADING\", loading: false });\r\n  };\r\n\r\n  const userAlreadyRegistered = () => {\r\n    const userId = userData?._id;\r\n    return eventInfo?.participants?.includes(userId);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const eventId = urlParams.id;\r\n    getEventDetails(eventId);\r\n  }, [urlParams?.id]);\r\n  return (\r\n    <div className=\"event-container\">\r\n      <div\r\n        className=\"event-back\"\r\n        onClick={() => {\r\n          history(-1);\r\n          // dispatch({ type: \"SET_FOCUS_MAP_TO_CENTER\", focusMapToCenter: true });\r\n        }}\r\n      >\r\n        <ArrowBack sx={{ color: \"rgb(162 161 161)\", fontSize: \"17px\" }} />{\" \"}\r\n        <span>Back</span>\r\n      </div>\r\n      <div className=\"event-main-container\">\r\n        <div className=\"event-top\">\r\n          <img className=\"event-main-img\" src={img2}></img>\r\n          <div className=\"event-info event-more-images\">\r\n            <div className=\"event-more-images-container\">\r\n              <img className=\"event-more-img\" src={img2}></img>\r\n              <img\r\n                className=\"event-more-img event-more-img-selected\"\r\n                src={img1}\r\n              ></img>\r\n            </div>\r\n          </div>\r\n          <div className=\"event-info event-host\">\r\n            Hosted by {eventInfo?.host}\r\n          </div>\r\n          <div className=\"event-top-container\">\r\n            <div className=\"event-info event-location\">\r\n              <h3>{eventInfo?.location}</h3>\r\n            </div>\r\n            <div className=\"event-info-date-participants\">\r\n              <div className=\"event-info event-date\">\r\n                {changeDateFormat(eventInfo?.date)}\r\n              </div>\r\n              <div className=\"event-info event-people\">\r\n                <PeopleAltRounded sx={{ marginRight: \"3px\" }} />\r\n                <span>{eventInfo?.participants?.length}</span>\r\n              </div>\r\n              {eventInfo?.max_players && (\r\n                <div className=\"event-info event-people\">\r\n                  <span>Maximum players : {eventInfo?.max_players}</span>\r\n                </div>\r\n              )}\r\n              {eventInfo?.min_age && (\r\n                <div className=\"event-info event-people\">\r\n                  <span>Minimum age : {eventInfo?.min_age}</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {eventInfo?.description && (\r\n              <div className=\"event-info event-desc\">\r\n                <p>Event details</p>\r\n                {eventInfo?.description}\r\n              </div>\r\n            )}\r\n            <div className=\"event-interaction-btns\">\r\n              {loggedIn && userAlreadyRegistered() ? (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  className=\"event-join-btn\"\r\n                  onClick={() => navigate(\"/chat\")}\r\n                >\r\n                  Go to chat\r\n                </Button>\r\n              ) : (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  className=\"event-join-btn\"\r\n                  onClick={() => joinEvent()}\r\n                >\r\n                  Participate\r\n                </Button>\r\n              )}\r\n              <Button\r\n                variant=\"contained\"\r\n                className=\"event-join-btn\"\r\n                onClick={() => locateEvent()}\r\n              >\r\n                Go to location\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Event;\r\n"],"names":["createSvgIcon","_jsx","d","urlParams","useParams","navigate","useNavigate","history","useState","useDataLayerValue","loggedIn","userData","dispatch","focusMapToCenter","eventInfo","setEventInfo","getEventDetails","eventId","type","loading","Api","params","then","res","data","event","catch","err","responseData","message","response","joinEvent","_id","useEffect","id","className","onClick","ArrowBack","sx","color","fontSize","src","img2","img1","host","location","rawDate","Date","month","getMonth","date","getDate","year","getFullYear","changeDateFormat","PeopleAltRounded","marginRight","participants","length","max_players","min_age","description","userId","includes","userAlreadyRegistered","Button","variant"],"sourceRoot":""}